// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// BlogPost defines model for BlogPost.
type BlogPost struct {
	// Author Author of the blog post.
	Author string `json:"author"`

	// Content Content of the blog post.
	Content string `json:"content"`

	// Id Unique identifier for the blog post.
	Id *int `json:"id,omitempty"`

	// Title Title of the blog post.
	Title string `json:"title"`
}

// GeneralError defines model for GeneralError.
type GeneralError struct {
	ErrorMessage string `json:"error_message"`
}

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = BlogPost

// PutPostsIdJSONRequestBody defines body for PutPostsId for application/json ContentType.
type PutPostsIdJSONRequestBody = BlogPost

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of all blog posts.
	// (GET /posts)
	GetPosts(c *gin.Context)
	// Create a new blog post.
	// (POST /posts)
	PostPosts(c *gin.Context)
	// Delete a blog post.
	// (DELETE /posts/{id})
	DeletePostsId(c *gin.Context, id int)
	// Retrieve details of a specific blog post.
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id int)
	// Update an existing blog post.
	// (PUT /posts/{id})
	PutPostsId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c)
}

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPosts(c)
}

// DeletePostsId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePostsId(c, id)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// PutPostsId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.POST(options.BaseURL+"/posts", wrapper.PostPosts)
	router.DELETE(options.BaseURL+"/posts/:id", wrapper.DeletePostsId)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
	router.PUT(options.BaseURL+"/posts/:id", wrapper.PutPostsId)
}

type GetPostsRequestObject struct {
}

type GetPostsResponseObject interface {
	VisitGetPostsResponse(w http.ResponseWriter) error
}

type GetPosts200JSONResponse []BlogPost

func (response GetPosts200JSONResponse) VisitGetPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsRequestObject struct {
	Body *PostPostsJSONRequestBody
}

type PostPostsResponseObject interface {
	VisitPostPostsResponse(w http.ResponseWriter) error
}

type PostPosts201JSONResponse BlogPost

func (response PostPosts201JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPosts400JSONResponse GeneralError

func (response PostPosts400JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostsIdRequestObject struct {
	Id int `json:"id"`
}

type DeletePostsIdResponseObject interface {
	VisitDeletePostsIdResponse(w http.ResponseWriter) error
}

type DeletePostsId204Response struct {
}

func (response DeletePostsId204Response) VisitDeletePostsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePostsId404Response struct {
}

func (response DeletePostsId404Response) VisitDeletePostsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPostsIdRequestObject struct {
	Id int `json:"id"`
}

type GetPostsIdResponseObject interface {
	VisitGetPostsIdResponse(w http.ResponseWriter) error
}

type GetPostsId200JSONResponse BlogPost

func (response GetPostsId200JSONResponse) VisitGetPostsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsId404Response struct {
}

func (response GetPostsId404Response) VisitGetPostsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutPostsIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutPostsIdJSONRequestBody
}

type PutPostsIdResponseObject interface {
	VisitPutPostsIdResponse(w http.ResponseWriter) error
}

type PutPostsId200JSONResponse BlogPost

func (response PutPostsId200JSONResponse) VisitPutPostsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsId400JSONResponse GeneralError

func (response PutPostsId400JSONResponse) VisitPutPostsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsId404Response struct {
}

func (response PutPostsId404Response) VisitPutPostsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve a list of all blog posts.
	// (GET /posts)
	GetPosts(ctx context.Context, request GetPostsRequestObject) (GetPostsResponseObject, error)
	// Create a new blog post.
	// (POST /posts)
	PostPosts(ctx context.Context, request PostPostsRequestObject) (PostPostsResponseObject, error)
	// Delete a blog post.
	// (DELETE /posts/{id})
	DeletePostsId(ctx context.Context, request DeletePostsIdRequestObject) (DeletePostsIdResponseObject, error)
	// Retrieve details of a specific blog post.
	// (GET /posts/{id})
	GetPostsId(ctx context.Context, request GetPostsIdRequestObject) (GetPostsIdResponseObject, error)
	// Update an existing blog post.
	// (PUT /posts/{id})
	PutPostsId(ctx context.Context, request PutPostsIdRequestObject) (PutPostsIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetPosts operation middleware
func (sh *strictHandler) GetPosts(ctx *gin.Context) {
	var request GetPostsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPosts(ctx, request.(GetPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPosts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPostsResponseObject); ok {
		if err := validResponse.VisitGetPostsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPosts operation middleware
func (sh *strictHandler) PostPosts(ctx *gin.Context) {
	var request PostPostsRequestObject

	var body PostPostsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPosts(ctx, request.(PostPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPosts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostPostsResponseObject); ok {
		if err := validResponse.VisitPostPostsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePostsId operation middleware
func (sh *strictHandler) DeletePostsId(ctx *gin.Context, id int) {
	var request DeletePostsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePostsId(ctx, request.(DeletePostsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePostsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePostsIdResponseObject); ok {
		if err := validResponse.VisitDeletePostsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostsId operation middleware
func (sh *strictHandler) GetPostsId(ctx *gin.Context, id int) {
	var request GetPostsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsId(ctx, request.(GetPostsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPostsIdResponseObject); ok {
		if err := validResponse.VisitGetPostsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutPostsId operation middleware
func (sh *strictHandler) PutPostsId(ctx *gin.Context, id int) {
	var request PutPostsIdRequestObject

	request.Id = id

	var body PutPostsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutPostsId(ctx, request.(PutPostsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPostsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutPostsIdResponseObject); ok {
		if err := validResponse.VisitPutPostsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
